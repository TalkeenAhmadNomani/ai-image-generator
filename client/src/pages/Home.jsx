import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Card, FormField, Loader } from "../components";
import { useAuth } from "../context/AuthContext";
import * as api from "../api";

const RenderCards = ({ data, title, onPostUpdate }) => {
  if (data?.length > 0) {
    return data.map((post) => (
      <Card key={post._id} {...post} onPostUpdate={onPostUpdate} />
    ));
  }
  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState([]);

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const { data } = await api.fetchPosts();
      if (data.success && data.data.posts) {
        setAllPosts(data.data.posts);
      }
    } catch (err) {
      console.error("Failed to fetch posts:", err);
      alert(
        "Could not fetch posts. Please ensure the backend server is running and accessible."
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchText) {
        const results = allPosts.filter(
          (item) =>
            item.author?.username
              ?.toLowerCase()
              .includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(results);
      } else {
        setSearchedResults(allPosts);
      }
    }, 300);

    return () => clearTimeout(timer);
  }, [searchText, allPosts]);

  const handleCreateClick = () => {
    if (user) {
      navigate("/create-post");
    } else {
      // You can also add a little message here if you like
      alert("Please log in or sign up to create a post.");
      navigate("/login");
    }
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center">
        <div>
          <h1 className="font-extrabold text-[#222328] text-[32px]">
            The Community Showcase
          </h1>
          <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
            Browse through a collection of imaginative and visually stunning
            images generated by AI
          </p>
        </div>
        {/* This button is now always visible */}
        <button
          onClick={handleCreateClick}
          className="font-inter font-medium bg-[#6469ff] text-white px-4 py-2 rounded-md mt-4 sm:mt-0"
        >
          Create
        </button>
      </div>
      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search by prompt or username..."
          value={searchText}
          handleChange={(e) => setSearchText(e.target.value)}
        />
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              <RenderCards
                data={searchedResults}
                title="No posts found"
                onPostUpdate={fetchPosts}
              />
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
